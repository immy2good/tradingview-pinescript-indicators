//@version=5
strategy("The ScalpMonster 3 - V50 Beta ", overlay=true, calc_on_order_fills = false, calc_on_every_tick = false, default_qty_type = strategy.percent_of_equity, initial_capital = 100000)

// Risk Management Inputs
useCompounding = input.bool(false, "Enable Compounding", group="Risk Management", tooltip="If enabled, risk is calculated based on starting equity plus accrued profits")
maxLotSize = input.float(1000.0, "Max Lot Size", group="Risk Management", tooltip="Defines the maximum position size allowed to prevent excessive risk when compounding is enabled.")
normalizeLotSize = input.bool(true, "Normalize Max Lot Size for Compounding", group="Risk Management", tooltip="If enabled, the position size will be capped at the defined maximum lot size when compounding is enabled to prevent excessive growth in position size.")



// Scaling Options Inputs
useScaling = input.bool(true, "Enable Position Scaling", group="Scaling Options", tooltip="Enable to use two take profit levels, disable for a single take profit level.")

// Visual Enhancements Inputs
showTrendShading = input.bool(true, "Show Trend Shading", group="Visual Enhancements")
showTrendFlags = input.bool(true, "Enable Trend Flags", group="Visual Enhancements")
fillTransparencySLEntry = input.int(70, "Transparency for SL-Entry Fill (0-100)", minval=0, maxval=100, group="Visual Enhancements")
fillTransparencyTP1TP2 = input.int(70, "Transparency for TP1-TP2 Fill (0-100)", minval=0, maxval=100, group="Visual Enhancements")
changeCandleColor = input.bool(true, "Change Candle Colors Based on Trend", group="Visual Enhancements")

// Risk Settings Inputs
riskPercentage = input.float(100.0, "Risk Percentage", group="Risk", tooltip="Adjust risk according to your broker's feed.")
tp1Multiple = input.float(0.5, "TP 1", step=0.1, inline="10", group="Scaling Out")
tp1Percent = input.float(50, "% to Close", inline="10", group="Scaling Out")
tp2Multiple = input.float(1.0, "TP 2", inline="11", group="Scaling Out")
tp2Percent = input.float(100, "% to Close", inline="11", group="Scaling Out")

// Order and Trade Management Inputs
factor = input.float(1, title="Factor", group="Order and Trade Management", tooltip="Number of pips or points.")
factorBuy = input.float(5, title="Add to Buy Signal Price", group="Order and Trade Management", tooltip="Buffer for Buy Signal.")
factorSell = input.float(0, title="Minus Sell Signal Price", group="Order and Trade Management", tooltip="Buffer for Sell Signal.")

// Trade Management Inputs
enableMaxTrades = input.bool(true, "Enable Max Trades Limit", group="Trade Management", tooltip="Enable this to limit the maximum number of trades per day. Disable for unlimited trades.")
maxLongTrades = input.int(5, "Max Long Trades", group="Trade Management", inline="40", tooltip="Max number of long trades per day")
maxShortTrades = input.int(3, "Max Short Trades", group="Trade Management", inline="40", tooltip="Max number of short trades per day")

// Signal Inputs
takeBuySignals = input.bool(true, "Take Buy Signals")
takeSellSignals = input.bool(true, "Take Sell Signals")

// Trading Window Inputs
startTradeHour = input.int(8, title="Start Hour", inline="30", group="Trading Window")
startTradeMinute = input.int(45, title=":", inline="30", group="Trading Window")
endTradeHour = input.int(12, title="End Hour", inline="31", group="Trading Window")
endTradeMinute = input.int(0, title=":", inline="31", group="Trading Window")

// Time Calculations
currentHour = hour(time, "Europe/London")
currentMinute = minute(time, "Europe/London")
timeToTrade = (currentHour > startTradeHour or (currentHour == startTradeHour and currentMinute >= startTradeMinute)) and
              (currentHour < endTradeHour or (currentHour == endTradeHour and currentMinute <= endTradeMinute))

// Moving Averages for Trend Detection
fasterMA = ta.ema(close[1], 5)
slowerMA = ta.ema(close[1], 10)

// Buy and Sell Signals
buySignal = (high <= high[1] and high[1] >= high[2] and high[2] >= high[3] and low[1] >= low[2] and low[2] >= low[3] and low >= low[2]) and close > fasterMA
sellSignal = (low >= low[1] and low[1] <= low[2] and low[2] <= low[3] and high[1] <= high[2] and high[2] <= high[3] and high <= high[2]) and close < fasterMA

crossoverUp = (fasterMA + syminfo.mintick * factor > slowerMA)
crossoverDown = (fasterMA - syminfo.mintick * factor < slowerMA)

// Calculate equity based on whether compounding is enabled
var float startingEquity = strategy.initial_capital
equity = useCompounding ? strategy.equity : startingEquity

// Risk Calculation using compounding or non-compounding
candleRange = high - low
risk = equity * (riskPercentage / 100)
qty = risk / (candleRange / (syminfo.mintick))

// Normalize the position size if compounding is enabled and normalization is active
if (useCompounding and normalizeLotSize)
    qty := math.min(qty, maxLotSize)  // Cap the position size at the max lot size

// Initialize trade counters
var int longTradesToday = 0
var int shortTradesToday = 0

// Plotting variables
var float longEntryPrice = na
var float longSL = na
var float longTP1 = na
var float longTP2 = na
var float shortEntryPrice = na
var float shortSL = na
var float shortTP1 = na
var float shortTP2 = na

// Apply Candle Color Changes Based on Trend
barcolor(changeCandleColor ? (fasterMA > slowerMA ? #3d40df : color.red) : na)

// Trend Background Shading
var color bgColor = na
if (showTrendShading)
    bgColor := fasterMA > slowerMA ? color.new(color.green, 90) : color.new(color.red, 90)
bgcolor(bgColor)

// Cancel the line plot if signal not triggered or trade is closed 
if strategy.position_size == 0
    longTP1 := na
    longTP2 := na
    longEntryPrice := na
    longSL := na
    shortTP1 := na
    shortTP2 := na
    shortEntryPrice := na
    shortSL := na

// Plot lines for long trades
longEntryPlot = plot(longEntryPrice, "Long Entry", style=plot.style_linebr, color=color.green, offset=-1)
longSLPlot = plot(longSL, "Long SL", style=plot.style_linebr, color=color.red, offset=-1)
longTP1Plot = plot(longTP1, "Long TP1", style=plot.style_linebr, color=color.blue, offset=-1)
longTP2Plot = plot(longTP2, "Long TP2", style=plot.style_linebr, color=color.blue, offset=-1)

// Buy Arrow: Plots an arrow in the shape of a triangle below the bar for Buy signals
plotshape(buySignal and crossoverUp and barstate.isconfirmed, style=shape.triangleup, location=location.belowbar, color=color.green, size=size.small, offset=0, title="Buy Alert")

// Sell Arrow: Plots an arrow in the shape of a triangle above the bar for Sell signals
plotshape(sellSignal and crossoverDown and barstate.isconfirmed, style=shape.triangledown, location=location.abovebar, color=color.red, size=size.small, offset=0, title="Sell Alert")

// Plot lines for short trades
shortEntryPlot = plot(shortEntryPrice, "Short Entry", style=plot.style_linebr, color=color.green, offset=-1)
shortSLPlot = plot(shortSL, "Short SL", style=plot.style_linebr, color=color.red, offset=-1)
shortTP1Plot = plot(shortTP1, "Short TP1", style=plot.style_linebr, color=color.blue, offset=-1)
shortTP2Plot = plot(shortTP2, "Short TP2", style=plot.style_linebr, color=color.blue, offset=-1)

// Fancy Graphics: Add Buy/Sell labels on chart
if (showTrendFlags)
    if (buySignal and barstate.isconfirmed)
        label.new(bar_index, low, style=label.style_flag, text="Buy", color=#3d40df, textcolor=color.white, size=size.small, tooltip="Buy Signal", yloc=yloc.abovebar)
    if (sellSignal and barstate.isconfirmed)
        label.new(bar_index, high, style=label.style_flag, text="Sell", color=color.new(color.red, 0), textcolor=color.white, size=size.small, tooltip="Sell Signal", yloc=yloc.belowbar)

// Apply transparent fill between SL-Entry and TP1-TP2
fill(longEntryPlot, longSLPlot, color=color.new(color.red, fillTransparencySLEntry))
fill(longTP1Plot, longTP2Plot, color=color.new(color.blue, fillTransparencyTP1TP2))

// Function to handle Buy Signal Trades
if buySignal and takeBuySignals and barstate.isconfirmed and strategy.opentrades == 0 and timeToTrade and crossoverUp and not crossoverDown and (not enableMaxTrades or longTradesToday < maxLongTrades)
    longEntryPrice := high + (factorBuy * syminfo.mintick)
    longSL := low - (factorBuy * syminfo.mintick)
    
    // Take Profit Logic based on position scaling
    if useScaling
        longTP1 := longEntryPrice + ((longEntryPrice - longSL) * tp1Multiple)
        longTP2 := longEntryPrice + ((longEntryPrice - longSL) * tp2Multiple)
        
        // Order Entry and Exits for Scaling
        strategy.order("BuyTrade", strategy.long, stop=longEntryPrice, qty=qty, comment="Buy")
        strategy.exit("TP1", "BuyTrade", limit=longTP1, qty_percent=tp1Percent, stop=longSL, comment_loss="SL1", comment_profit="TP1")
        strategy.exit("TP2", "BuyTrade", limit=longTP2, qty_percent=tp2Percent, stop=longSL, comment_loss="SL2", comment_profit="TP2")
    else
        // Single Take Profit if scaling is disabled
        longTP1 := longEntryPrice + ((longEntryPrice - longSL) * tp2Multiple)
        
        // Order Entry and Exit for Single TP
        strategy.order("BuyTrade", strategy.long, stop=longEntryPrice, qty=qty, comment="Buy")
        strategy.exit("TP", "BuyTrade", limit=longTP1, stop=longSL, comment_loss="SL", comment_profit="TP")
    
    // Increment long trades counter
    longTradesToday += 1

// create a var for alert bool 
var bool alertSell = false 

// Function to handle Sell Signal Trades
if sellSignal and takeSellSignals and barstate.isconfirmed and strategy.opentrades == 0 and timeToTrade and crossoverDown and not crossoverUp and (not enableMaxTrades or shortTradesToday < maxShortTrades)
    alertSell := true
    shortEntryPrice := low - (factor * syminfo.mintick)
    shortSL := high + (factorSell * syminfo.mintick)
    
    // Take Profit Logic based on position scaling
    if useScaling
        shortTP1 := shortEntryPrice - ((shortSL - shortEntryPrice) * tp1Multiple)
        shortTP2 := shortEntryPrice - ((shortSL - shortEntryPrice) * tp2Multiple)
        
        // Order Entry and Exits for Scaling
        strategy.order("SellTrade", strategy.short, stop=shortEntryPrice, qty=qty, comment="Sell")
        strategy.exit("TP1", "SellTrade", limit=shortTP1, qty_percent=tp1Percent, stop=shortSL, comment_loss="SL1", comment_profit="TP1")
        strategy.exit("TP2", "SellTrade", limit=shortTP2, qty_percent=tp2Percent, stop=shortSL, comment_loss="SL2", comment_profit="TP2")
    else
        // Single Take Profit if scaling is disabled
        shortTP1 := shortEntryPrice - ((shortSL - shortEntryPrice) * tp2Multiple)
        
        // Order Entry and Exit for Single TP
        strategy.order("SellTrade", strategy.short, stop=shortEntryPrice, qty=qty, comment="Sell")
        strategy.exit("TP", "SellTrade", limit=shortTP1, stop=shortSL, comment_loss="SL", comment_profit="TP")
    
    // Increment short trades counter
    shortTradesToday += 1

// Reset trades if new day
if (dayofmonth(time) != dayofmonth(time[1]))
    longTradesToday := 0
    shortTradesToday := 0

    // Define license ID and user input variables
    licenseID = "6161199464661"
    userInput = input("Enter your license ID", type=input.string, defval="")
    
    // Create alert messages
    buyAlertMessage = licenseID + ",buy,EURUSD,risk=1,secret=" + userInput
    sellAlertMessage = licenseID + ",sell,EURUSD,risk=1,secret=" + userInput
    
    // Trigger buy alert
    if (alertBuy)
        alert(buyAlertMessage, alert.freq_once_per_bar_close)
    
    // Trigger sell alert
    if (alertSell)
        alert(sellAlertMessage, alert.freq_once_per_bar_close)