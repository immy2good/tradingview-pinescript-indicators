//@version=5
strategy("The Ultimate NAS100 Strategy by iTradeAIMS - User Input", overlay=true, 
         calc_on_order_fills = false, 
         calc_on_every_tick = true, 
         default_qty_type = strategy.percent_of_equity, 
         initial_capital = 1000000)

// ========== Risk Management ==========
use_compounding = input.bool(false, "Enable Compounding", group="Risk Management", 
     tooltip="If enabled, risk is calculated based on starting equity plus accrued profits")
max_lot_size = input.float(1000.0, "Max Lot Size", group="Risk Management", 
     tooltip="Defines the maximum position size allowed to prevent excessive risk when compounding is enabled.")
normalize_lot_size = input.bool(true, "Normalize Max Lot Size for Compounding", group="Risk Management", 
     tooltip="If enabled, the position size will be capped at the defined maximum lot size when compounding is enabled to prevent excessive growth in position size.")

// ========== Risk and Trade Management ==========
riskPerc = input.float(25.0, "Risk Percentage", group = "Risk and Trade Management", 
     tooltip = "Change Risk per trade to your liking. Some data feeds convert 10 to 1")

// ========== Scaling Out ==========
tp1_multiple = 0.5
tp1_percent = 100

// ========== Take Profit Management ==========
tp_type = input.string("Multiple of SL", "Take Profit Type", options=["Multiple of SL", "Fixed Points"], group="Take Profit Management", 
     tooltip="Choose whether to set Take Profit as a multiple of SL or as fixed points.")
tp_multiple = input.float(1.5, "Take Profit Multiple", step=0.1, group="Take Profit Management", 
     tooltip="Take Profit level as a multiple of SL distance. Used only if 'Multiple of SL' is selected.")
tp_fixed = input.int(50, "Take Profit Points",  group="Take Profit Management", 
     tooltip="Take Profit level in fixed points. Used only if 'Fixed Points' is selected.")

// ========== Signal & Trades Management ==========
factor = input.float(10, title = "Factor", group = "Signal & Trades Management", 
     tooltip = "The distance between candle high/low and entry price. It changes based on the broker's quoted prices")

// Max Trade Limits
max_long_trades = input.int(1, "Longs", group = "Signal & Trades Management", inline = "Trade Limits")
max_short_trades = input.int(0, "Shorts", group = "Signal & Trades Management", inline = "Trade Limits")

takeBuySignals = input.bool(true, "Take Buy Signals", group = "Signal & Trades Management")
takeSellSignals = input.bool(true, "Take Sell Signals", group = "Signal & Trades Management")

// ========== Trailing Stop Management ==========
use_trailing_stop = input.bool(true, "Enable Trailing Stop", group="Trailing Stop Management", 
     tooltip="Enable or disable the trailing stop mechanism.")

// ========== Trading Hours Management ==========
startTradeHour = input.int(15 , title="Start: Hour ", inline = "Start", group = "Trading Hours Management", 
     minval = 0, maxval = 23, tooltip = "Enter Start Hour (0-23)")
startTradeMinute = input.int(0 , title="Start: Minutes", inline = "StartMin", group = "Trading Hours Management", 
     minval = 0, maxval = 59, tooltip = "Enter Start Minute (0-59)")
endTradeHour = input.int(18, title="End: Hour", inline = "End", group = "Trading Hours Management", 
     minval = 0, maxval = 23, tooltip = "Enter End Hour (0-23)")
endTradeMinute = input.int(00, title="End: Minutes", inline = "EndMin", group = "Trading Hours Management", 
     minval = 0, maxval = 59, tooltip = "Enter End Minute (0-59)")

// Define DST periods (last Sunday of March to last Sunday of October)
isDst = (month(time, "Europe/London") > 3 and month(time, "Europe/London") < 10) or 
       (month(time, "Europe/London") == 3 and dayofweek(time, "Europe/London") == dayofweek.sunday and dayofmonth(time, "Europe/London") >= 25) or 
       (month(time, "Europe/London") == 10 and dayofweek(time, "Europe/London") == dayofweek.sunday and dayofmonth(time, "Europe/London") <= 31)

// Adjust trade hours based on DST
startHourAdjusted = isDst ? startTradeHour - 1 : startTradeHour
endHourAdjusted = isDst ? endTradeHour - 1 : endTradeHour

// Current time in London
currentHour = hour(time, "Europe/London")
currentMinute = minute(time, "Europe/London")

// Time to trade window with adjusted DST hours
timeToTrade = (currentHour > startHourAdjusted or (currentHour == startHourAdjusted and currentMinute >= startTradeMinute)) and 
              (currentHour < endHourAdjusted or (currentHour == endHourAdjusted and currentMinute <= endTradeMinute))

// ========== Moving Averages for Trend Detection ==========
fasterma = ta.ema(close[1], 5)
slowerma = ta.ema(close[1], 10)

// ========== Bull and Bear Patterns ==========
bullPattern = (high <= high[1] and high[1] >= high[2] and low >= low[2])
bearPattern = (low >= low[1] and low[1] <= low[2] and high <= high[2])

crossoverUp = (fasterma[1] > slowerma[1])
crossoverDown = (fasterma[1] < slowerma[1])

// ========== Equity and Risk Calculation ==========
var float starting_equity = strategy.initial_capital
equity = use_compounding ? strategy.equity : starting_equity

candle_range = high - low
risk = equity * (riskPerc / 100)
qty = risk / (candle_range / (syminfo.mintick))

// Normalize position size for compounding
if (use_compounding and normalize_lot_size)
    qty := math.min(qty, max_lot_size)

// ========== Signal Management Inputs ==========
use_signal_bar_delay = input.bool(true, "Use Bar Delay for Signal Cancellation", group="Signal Management", 
     tooltip="Enable or disable cancellation of signals based on a maximum number of bars.")
max_signal_bars = input.int(3, "Max Signal Bars", group="Signal Management", 
     tooltip="Maximum number of bars to wait before cancelling the order if not filled.")

use_close_condition = input.bool(true, "Use Close Price Condition for Cancellation", group="Signal Management", 
     tooltip="Enable or disable cancellation of signals based on price closing above/below the signal candle.")

// ========== Close All Trades Time Inputs ==========
enable_close_all_time = input.bool(true, "Enable Close All Trades at Specific Time", group="Close All Trades Management", 
     tooltip="Enable or disable closing all trades at a user-specified time.")
closeAllHour = input.int(17, "Close All Trades: Hour", group="Close All Trades Management", 
     minval=0, maxval=23, tooltip="Enter Hour (0-23) to close all trades.")
closeAllMinute = input.int(30, "Close All Trades: Minute", group="Close All Trades Management", 
     minval=0, maxval=59, tooltip="Enter Minute (0-59) to close all trades.")

// ========== Variables to Manage Buy/Sell Signals ==========
var int longtradesToday = 0
var float long_SL = na 
var float longEntryPrice = na
var float Long_tp1 = na

var int shorttradesToday = 0
var float short_SL = na
var float shortEntryPrice = na
var float short_tp1 = na

// Trailing Stop Variables for Longs
var bool long_trail_half_sl_set = false
var bool long_trail_breakeven_set = false

// Trailing Stop Variables for Shorts
var bool short_trail_half_sl_set = false
var bool short_trail_breakeven_set = false

// Variables to manage buy signal
var int buy_signal_bar_count = 0
var float buy_signal_low = na
var bool buy_order_active = false

// Variables to manage sell signal
var int sell_signal_bar_count = 0
var float sell_signal_high = na
var bool sell_order_active = false

// ========== Plotting for Debugging ==========
plot(longEntryPrice, "Long Entry", style=plot.style_linebr, color=color.green, offset = -1)
plot(long_SL, "Long SL", style=plot.style_linebr, color=color.red, offset = -1)
plot(Long_tp1, "Long TP1", style=plot.style_linebr, color=color.blue, offset = -1)
plot(shortEntryPrice, "Short Entry", style=plot.style_linebr, color=color.green, offset = -1)
plot(short_SL, "Short SL", style=plot.style_linebr, color=color.red, offset = -1)
plot(short_tp1, "Short TP1", style=plot.style_linebr, color=color.blue, offset = -1)

// ========== Reset SL and TP Lines ==========
if (low <= long_SL or high >= Long_tp1 or strategy.position_size == 0)
    Long_tp1 := na
    longEntryPrice := na
    long_SL := na
    long_trail_half_sl_set := false
    long_trail_breakeven_set := false

if (high >= short_SL or low <= short_tp1 or strategy.position_size == 0)
    short_tp1 := na
    shortEntryPrice := na
    short_SL := na
    short_trail_half_sl_set := false
    short_trail_breakeven_set := false

// ========== Buy Signal Logic ==========
buySignal = bullPattern and takeBuySignals and barstate.isconfirmed and timeToTrade and longtradesToday < max_long_trades and crossoverUp and not crossoverDown

if buySignal
    alert("Buy Signal Detected - NAS100")
    longEntryPrice := high + (factor * syminfo.mintick)
    long_SL := low - (factor * syminfo.mintick)
    
    // Calculate Take Profit based on user selection
    Long_tp1 := tp_type == "Multiple of SL" ? longEntryPrice + ((longEntryPrice - long_SL) * tp_multiple) : 
     longEntryPrice + tp_fixed
    
    longtradesToday += 1
    strategy.order("BuyTrade", strategy.long, stop=longEntryPrice, qty=qty, comment="Buy")
    strategy.exit("TP1", "BuyTrade", limit=Long_tp1, qty_percent=tp1_percent, stop=long_SL,
     comment_loss="SL1", comment_profit="TP1")
    
    // Set buy signal management variables
    buy_signal_bar_count := 0
    buy_signal_low := low
    buy_order_active := true
    
    // Reset trailing stop flags
    long_trail_half_sl_set := false
    long_trail_breakeven_set := false

// ========== Manage Buy Order Cancellation ==========
if buy_order_active
    // If buy order is filled, deactivate the buy order tracker
    if strategy.position_size > 0
        buy_order_active := false
    else
        // Increment the bar count if bar delay is enabled
        if use_signal_bar_delay
            buy_signal_bar_count += 1
        // Check if maximum bars exceeded
        bar_delay_exceeded = use_signal_bar_delay and (buy_signal_bar_count >= max_signal_bars)
        // Check if close condition is met
        close_condition_met = use_close_condition and (close < buy_signal_low)
        // Cancel the order if any active cancellation condition is met
        if (bar_delay_exceeded or close_condition_met)
            strategy.cancel("BuyTrade")
            buy_order_active := false

// ========== Sell Signal Logic ==========
sellSignal = bearPattern and takeSellSignals and barstate.isconfirmed and timeToTrade and shorttradesToday < max_short_trades and crossoverDown and not crossoverUp

if sellSignal
    alert("Sell Signal Detected - NAS100")
    shortEntryPrice := low - (factor * syminfo.mintick)
    short_SL := high + (factor * syminfo.mintick)
    
    // Calculate Take Profit based on user selection
    short_tp1 := tp_type == "Multiple of SL" ? 
     shortEntryPrice - ((short_SL - shortEntryPrice) * tp_multiple) : 
     shortEntryPrice - tp_fixed
    
    shorttradesToday += 1
    strategy.order("SellTrade", strategy.short, stop=shortEntryPrice, qty=qty, comment="Sell")
    strategy.exit("TP1", "SellTrade", limit=short_tp1, qty_percent=tp1_percent, stop=short_SL, 
     comment_loss="SL1", comment_profit="TP1")
    
    // Set sell signal management variables
    sell_signal_bar_count := 0
    sell_signal_high := high
    sell_order_active := true
    
    // Reset trailing stop flags
    short_trail_half_sl_set := false
    short_trail_breakeven_set := false

// ========== Manage Sell Order Cancellation ==========
if sell_order_active
    // If sell order is filled, deactivate the sell order tracker
    if strategy.position_size < 0
        sell_order_active := false
    else
        // Increment the bar count if bar delay is enabled
        if use_signal_bar_delay
            sell_signal_bar_count += 1
        // Check if maximum bars exceeded
        bar_delay_exceeded = use_signal_bar_delay and (sell_signal_bar_count >= max_signal_bars)
        // Check if close condition is met
        close_condition_met = use_close_condition and (close > sell_signal_high)
        // Cancel the order if any active cancellation condition is met
        if (bar_delay_exceeded or close_condition_met)
            strategy.cancel("SellTrade")
            sell_order_active := false

// ========== Trailing Stop Mechanism ==========
if use_trailing_stop
    // ==== Trailing Stop for Long Positions ====
    if strategy.position_size > 0
        // Calculate current profit
        long_profit = close - longEntryPrice
        // Calculate 75% of TP distance
        long_tp_distance = Long_tp1 - longEntryPrice
        long_tp_75 = longEntryPrice + (long_tp_distance * 0.75)
        
        // Move SL to half of the original SL distance if not already done
        if (close > longEntryPrice + ( (longEntryPrice - long_SL) / 2 )) and not long_trail_half_sl_set
            new_long_SL = longEntryPrice + ( (longEntryPrice - long_SL) / 2 )
            strategy.exit("Trail_SL_Half", "BuyTrade", stop=new_long_SL, comment="Trailing SL Half")
            long_trail_half_sl_set := true
        
        // Move SL to breakeven if price reaches 75% of TP
        if (close >= long_tp_75) and not long_trail_breakeven_set
            new_long_SL = longEntryPrice
            strategy.exit("Trail_SL_BE", "BuyTrade", stop=new_long_SL, comment="Trailing SL Breakeven")
            long_trail_breakeven_set := true
    
    // ==== Trailing Stop for Short Positions ====
    if strategy.position_size < 0
        // Calculate current profit
        short_profit = shortEntryPrice - close
        // Calculate 75% of TP distance
        short_tp_distance = shortEntryPrice - short_tp1
        short_tp_75 = shortEntryPrice - (short_tp_distance * 0.75)
        
        // Move SL to half of the original SL distance if not already done
        if (close < shortEntryPrice - ( (short_SL - shortEntryPrice) / 2 )) and not short_trail_half_sl_set
            new_short_SL = shortEntryPrice - ( (short_SL - shortEntryPrice) / 2 )
            strategy.exit("Trail_SL_Half_Short", "SellTrade", stop=new_short_SL, comment="Trailing SL Half Short")
            short_trail_half_sl_set := true
        
        // Move SL to breakeven if price reaches 75% of TP
        if (close <= short_tp_75) and not short_trail_breakeven_set
            new_short_SL = shortEntryPrice
            strategy.exit("Trail_SL_BE_Short", "SellTrade", stop=new_short_SL, comment="Trailing SL Breakeven Short")
            short_trail_breakeven_set := true

// ========== Close All Trades at Specific Time ==========
if enable_close_all_time
    // Check if current time matches the close all trades time
    is_close_all_time = (currentHour == closeAllHour) and (currentMinute == closeAllMinute)
    if is_close_all_time
        strategy.close_all("Close All Trades at Specified Time")

// ========== Close All Trades at Session End ==========
closeAll_sessionEnd = input.bool(true ,"Close all trades at session end", group="Signal Management")
if not timeToTrade and closeAll_sessionEnd
    strategy.close_all("Close all Entries")

// ========== Reset Trade Counts at New Day ==========
if dayofmonth(time) != dayofmonth(time[1])
    longtradesToday := 0
    shorttradesToday := 0

// ========== Plot Buy/Sell Signals ==========
plotshape(buySignal, "Long Signal", color=color.rgb(29, 144, 239, 28), style=shape.triangleup, location=location.belowbar)
plotshape(sellSignal, "Short Signal", color=color.rgb(255, 82, 82, 29), style=shape.triangledown, location=location.abovebar)

// ========== Plot Moving Averages ==========
plot(fasterma, "Faster EMA", color=#db2f2f, linewidth=1, display=display.all)
plot(slowerma, "Slower EMA", color=color.rgb(36, 73, 219), linewidth=2, display=display.all)
